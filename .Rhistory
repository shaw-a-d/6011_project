<<<<<<< HEAD
theme_void()
rm(tiles)
# Calculate absolute change in capacity
solar_growth <- solar_panel_final |>
group_by(state, year) |>
filter(year %in% c(2014, 2023)) |>
summarise(total_mw = sum(total_mw, na.rm = TRUE), .groups = "drop") |>
pivot_wider(names_from = year,
values_from =  total_mw,
names_prefix = "mw_") |>
mutate(mw_growth = mw_2023 - mw_2014)
mean_rps <- solar_panel_final |>
group_by(state) |>
summarise(mean_rps = mean(rps_target, na.rm = TRUE)*100, .groups = "drop")
solar_growth <- solar_growth |>
left_join(mean_rps, by = "state")
tiles <- us_state_grid1 |>
left_join(solar_growth, by = c("code" = "state"))
View(tiles)
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth, width = mean_rps, height = mean_rps), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
rm(tiles)
solar_growth <- solar_panel_final |>
group_by(state, year) |>
filter(year %in% c(2014, 2023)) |>
summarise(total_mw = sum(total_mw, na.rm = TRUE), .groups = "drop") |>
pivot_wider(names_from = year,
values_from =  total_mw,
names_prefix = "mw_") |>
mutate(mw_growth = mw_2023 - mw_2014)
mean_rps <- solar_panel_final |>
group_by(state) |>
summarise(mean_rps = mean(rps_target, na.rm = TRUE), .groups = "drop")
solar_growth <- solar_growth |>
left_join(mean_rps, by = "state")
# Map ---------------------------------------------------------------------
tiles <- us_state_grid1 |>
left_join(solar_growth, by = c("code" = "state"))
View(tiles)
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth, width = mean_rps, height = mean_rps), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth, width = mean_rps, height = mean_rps), color = "black") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth, width = mean_rps, height = mean_rps), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth, width = mean_rps*100, height = mean_rps*100), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth, width = mean_rps*20, height = mean_rps*20), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth, width = mean_rps*2, height = mean_rps*2), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth, width = mean_rps*5, height = mean_rps*5), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mean_rps, width = mean_rps*5, height = mean_rps*5), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
geom_tile(aes(fill = mean_rps, width = mw_growth, height = mw_growth, color = "white") +
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth, width = mean_rps*5, height = mean_rps*5), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth, width = mw_growth, height = mean_rps*5), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth, width = mw_growth, height = mw_growth), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth, width = mw_growth, height = mw_growth/100), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth, width = mw_growth, height = mw_growth/10), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth, width = mw_growth/2, height = mw_growth/2), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_minimal()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = rps_target), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mean_rps), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
summary(model_fixed)
summary(model_rps_only)
summary(model_fixed)
str(solar_panel_final)
top_states <- solar_panel_final %>%
group_by(state) %>%
filter(year == max(year)) %>%
arrange(desc(total_mw)) %>%
pull(state)
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth), color = "white") +
geom_text(aes(label = code), size = 3, color = "black") +
scale_fill_viridis_c(name = "Solar Capacity Growth", option = "plasma") +
coord_fixed() +
theme_void()
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = total_mw_growth), color = "white", width = 0.95, height = 0.95) +
geom_text(aes(label = round(avg_rps_target, 1)), size = 2.8, color = "black") +
scale_fill_viridis_c(
name = "Total Solar MW Growth",
option = "magma",
direction = -1,
na.value = "gray90"
) +
coord_fixed() +
theme_void() +
labs(title = "State Solar Growth vs Avg RPS Target (2014–2023)",
subtitle = "Label = Avg RPS Target (%)") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 13),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "right"
)
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth), color = "white", width = 0.95, height = 0.95) +
geom_text(aes(label = round(avg_rps_target, 1)), size = 2.8, color = "black") +
scale_fill_viridis_c(
name = "Total Solar MW Growth",
option = "magma",
direction = -1,
na.value = "gray90"
) +
coord_fixed() +
theme_void() +
labs(title = "State Solar Growth vs Avg RPS Target (2014–2023)",
subtitle = "Label = Avg RPS Target (%)") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 13),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "right"
)
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth), color = "white", width = 0.95, height = 0.95) +
geom_text(aes(label = round(mean_rps, 1)), size = 2.8, color = "black") +
scale_fill_viridis_c(
name = "Total Solar MW Growth",
option = "magma",
direction = -1,
na.value = "gray90"
) +
coord_fixed() +
theme_void() +
labs(title = "State Solar Growth vs Avg RPS Target (2014–2023)",
subtitle = "Label = Avg RPS Target (%)") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 13),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "right"
)
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth), color = "white", width = 0.95, height = 0.95) +
geom_text(aes(label = round(mean_rps*100, 1)), size = 2.8, color = "black") +
scale_fill_viridis_c(
name = "Total Solar MW Growth",
option = "magma",
direction = -1,
na.value = "gray90"
) +
coord_fixed() +
theme_void() +
labs(title = "State Solar Growth vs Avg RPS Target (2014–2023)",
subtitle = "Label = Avg RPS Target (%)") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 13),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "right"
)
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth), color = "white", width = 0.95, height = 0.95) +
geom_text(aes(label = round(mean_rps*100, 1)), size = 2.8, color = "black") +
scale_fill_viridis_c(
name = "Total Solar MW Growth",
option = "plasma",
direction = -1,
na.value = "gray90"
) +
coord_fixed() +
theme_void() +
labs(title = "State Solar Growth vs Avg RPS Target (2014–2023)",
subtitle = "Label = Avg RPS Target (%)") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 13),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "right"
)
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth), color = "white", width = 0.95, height = 0.95) +
geom_text(aes(label = round(mean_rps*100, 1)), size = 2.8, color = "black") +
scale_fill_viridis_c(
name = "Total Solar MW Growth",
option = "plasma",
direction = 1,
na.value = "gray90"
) +
coord_fixed() +
theme_void() +
labs(title = "State Solar Growth vs Avg RPS Target (2014–2023)",
subtitle = "Label = Avg RPS Target (%)") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 13),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "right"
)
ggplot(tiles, aes(x = col, y = -row)) +
geom_tile(aes(fill = mw_growth), color = "white", width = 0.95, height = 0.95) +
geom_text(aes(label = round(mean_rps*100, 1)), size = 2.8, color = "black") +
scale_fill_viridis_c(
name = "Total Solar MW Growth",
option = "plasma",
direction = -1,
na.value = "gray90"
) +
coord_fixed() +
theme_void() +
labs(title = "State Solar Growth vs Avg RPS Target (2014–2023)",
subtitle = "Label = Avg RPS Target (%)") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 13),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "right"
)
solar_growth <- solar_growth |>
mutate(region = tolower(state.name[match(state, state.abb)]))
View(solar_growth)
map <- map_data("state")
map_data <- map |>
left_join(solar_growth, by = "region")
View(map_data)
ggplot(map_data, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = mw_growth), color = "white") +
coord_fixed(1) +
scale_fill_viridis_c(name = "Total Solar Capacity Growth (MW)",
option = "plasma") +
theme_void()
# Map ---------------------------------------------------------------------
library(sf)
library(tigris)
library(dplyr)
library(ggplot2)
library(viridis)
# Map ---------------------------------------------------------------------
install.packages('viridis')
library(sf)
library(tigris)
library(dplyr)
library(ggplot2)
library(viridis)
options(tigris_use_cache = TRUE)
# Get contiguous U.S. states as sf object
states_sf <- states(cb = TRUE, resolution = "20m") |>
filter(!STUSPS %in% c("AK", "HI", "PR"))  # exclude Alaska, Hawaii, Puerto Rico
solar_growth_sf <- solar_growth |>
rename(STUSPS = state)
states_merged <- left_join(states_sf, solar_growth_sf, by = "STUSPS")
ggplot(states_merged) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_viridis_c(name = "Total Solar", option = "plasma")
states_merge_proj <- st_transform(states_merged, crs = 5070)
ggplot(states_merged_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_viridis_c(name = "Total Solar", option = "plasma")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_viridis_c(name = "Total Solar", option = "plasma")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_viridis_c(name = "Total Solar Capacity Growth (2014-2023)", option = "plasma")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_viridis_c(name = "Total Solar Capacity\n Growth (2014-2023)", option = "plasma")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_viridis_c(name = "Total Solar Capacity\nGrowth (2014-2023)", option = "plasma")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(STUSPS, "\n", round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_viridis_c(name = "Total Solar Capacity\nGrowth (2014-2023)", option = "plasma")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(STUSPS, "\n", round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_viridis_c(name = "Total Solar Capacity\nGrowth (2014-2023)", option = "magma")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(STUSPS, "\n", round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_viridis_c(name = "Total Solar Capacity\nGrowth (2014-2023)", option = "plasma")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(STUSPS, "\n", round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_viridis_c(name = "Total Solar Capacity\nGrowth (2014-2023)", option = "plasma") +
labs(title = "Solar Growth vs. Avg RPS Target (2014-2023)")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(STUSPS, "\n", round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_viridis_c(name = "Total Solar Capacity\nGrowth (2014-2023)", option = "plasma") +
theme_void() +
labs(title = "Solar Growth vs. Avg RPS Target (2014-2023)")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(STUSPS, "\n", round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_viridis_c(name = "Total Solar Capacity\nGrowth (2014-2023)", option = "plasma") +
theme_minimal() +
labs(title = "Solar Growth vs. Avg RPS Target (2014-2023)")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(STUSPS, "\n", round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_viridis_c(name = "Total Solar Capacity\nGrowth (2014-2023)", option = "viridis") +
theme_minimal() +
labs(title = "Solar Growth vs. Avg RPS Target (2014-2023)")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(STUSPS, "\n", round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_gradient(
name = "Total Solar Capacity Growth (in mW)",
low = "#f0f0f0",
high = "#1f78b4"
) +
theme_minimal() +
labs(title = "Solar Growth vs. Avg RPS Target (2014-2023)")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(STUSPS, "\n", round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_gradient(
name = "Total Solar Capacity\nGrowth (in mW)",
low = "#f0f0f0",
high = "#1f78b4"
) +
theme_minimal() +
labs(title = "Solar Growth vs. Avg RPS Target (2014-2023)")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(STUSPS, "\n", round(mean_rps, 1), "%")), size = 2.5,
color = "black") +
scale_fill_gradient(
name = "Total Solar Capacity\nGrowth (in mW)",
low = "#f0f0f0",
high = "#1f78b4"
) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grild = element_blank()
) +
labs(title = "Solar Growth vs. Avg RPS Target (2014-2023)")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(STUSPS, "\n", round(mean_rps*100, 1), "%")), size = 2.5,
color = "black") +
scale_fill_gradient(
name = "Total Solar Capacity\nGrowth (in mW)",
low = "#f0f0f0",
high = "#1f78b4"
) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grild = element_blank()
) +
labs(title = "Solar Growth vs. Avg RPS Target (2014-2023)")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(STUSPS, "\n", round(mean_rps*100, 1), "%")), size = 2.5,
color = "black") +
scale_fill_gradient(
name = "Total Solar Capacity\nGrowth (in mW)",
low = "#f0f0f0",
high = "#1f78b4"
) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grild = element_blank()
) +
labs(title = "Solar Growth vs. Avg RPS Target (2014-2023)")
ggplot(states_merge_proj) +
geom_sf(aes(fill = mw_growth), color = "white") +
geom_sf_text(aes(label = paste0(STUSPS, "\n", round(mean_rps*100, 1), "%")), size = 2.5,
color = "black") +
scale_fill_gradient(
name = "Total Solar Capacity\nGrowth (in mW)",
low = "#f0f0f0",
high = "#1f78b4"
) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
labs(title = "Solar Growth vs. Avg RPS Target (2014-2023)")
# Coefficient -------------------------------------------------------------
library(broom)
tidy_model <- broom::tidy(model1, conf.int = TRUE)
tidy_model <- tidy_model |>
filter(term != "(Intercept") |>
arrange(estimate)
ggplot(tidy_model, aes(x = estimate, y = reorder(term, estimate))) +
geom_point(size = 3, color = "#1f78b4") +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2, color = "gray40") +
geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
labs(
title = "Effect of Predictors on Solar MW Growth",
x = "Estimated Coefficient (with 95% CI)",
y = NULL
) +
theme_minimal(base_size = 12)
=======
mutate(year = year)
file_list <- list.files('project_data/raw/generator', full.names = TRUE)
solar_state_year <- data.frame()
for (file in file_list) {
year <- as.numeric(gsub("\\D", "", basename(file)))
df <- read_xlsx(file, sheet = 1) |>
clean_names()
df_solar <- df |>
filter(technology == 'Solar Photovoltaic') |>
group_by(state) |>
reframe(total_mw = sum(nameplate_capacity_mw)) |>
mutate(year = year)
solar_state_year <- bind_rows(solar_state_year, df_solar)
}
# Solar generator capacity (state x year)
library(readr)
library(readxl)
library(janitor)
library(dplyr)
library(tidyr)
library(ggplot2)
file_list <- list.files('project_data/raw/generator', full.names = TRUE)
solar_state_year <- data.frame()
for (file in file_list) {
year <- as.numeric(gsub("\\D", "", basename(file)))
df <- read_xlsx(file, sheet = 1) |>
clean_names()
df_solar <- df |>
filter(technology == 'Solar Photovoltaic') |>
group_by(state) |>
reframe(total_mw = sum(nameplate_capacity_mw)) |>
mutate(year = year)
solar_state_year <- bind_rows(solar_state_year, df_solar)
}
file_list <- list.files('project_data/raw/generator', full.names = TRUE)
solar_state_year <- data.frame()
for (file in file_list) {
year <- as.numeric(gsub("\\D", "", basename(file)))
df <- read_xlsx(file, sheet = 1) |>
clean_names()
df_solar <- df |>
filter(technology == 'Solar Photovoltaic') |>
group_by(state) |>
reframe(total_mw = sum(nameplate_capacity_mw)) |>
mutate(year = year)
solar_state_year <- bind_rows(solar_state_year, df_solar)
}
library(readr)
library(readxl)
library(janitor)
library(dplyr)
library(tidyr)
library(ggplot2)
library(usdata)
file_list <- list.files('project_data/raw/generator', full.names = TRUE)
solar_state_year <- data.frame()
for (file in file_list) {
year <- as.numeric(gsub("\\D", "", basename(file)))
df <- read_xlsx(file, sheet = 1) |>
clean_names()
df_solar <- df |>
filter(technology == 'Solar Photovoltaic') |>
group_by(state) |>
reframe(total_mw = sum(nameplate_capacity_mw)) |>
mutate(year = year)
solar_state_year <- bind_rows(solar_state_year, df_solar)
}
unique(solar_state_year$state)
sort(unique(solar_state_year$state))
View(df_solar)
test <- read_xlsx('project_data/raw/generator/generator_2014.xlsx')
View(test)
unique(test$State)
sort(unique(test$State))
rm(test)
file_list <- list.files('project_data/raw/generator', full.names = TRUE)
solar_state_year <- data.frame()
for (file in file_list) {
year <- as.numeric(gsub("\\D", "", basename(file)))
df <- read_xlsx(file, sheet = 1) |>
clean_names()
df_solar <- df |>
filter(technology == 'Solar Photovoltaic') |>
group_by(state) |>
reframe(total_mw = sum(nameplate_capacity_mw)) |>
mutate(year = year) |>
filter(state != 'DC')
solar_state_year <- bind_rows(solar_state_year, df_solar)
}
View(solar_state_year)
sort(unique(solar_state_year$state))
library(tibble)
grid <- expand.grid(
state = state.abb,
year = 2014:2023
) |> as_tibble()
source('project/party_control.R')
library(readr)
library(readxl)
library(janitor)
library(dplyr)
library(tidyr)
library(ggplot2)
file_list <- list.files('project_data/raw/generator', full.names = TRUE)
solar_state_year <- data.frame()
for (file in file_list) {
year <- as.numeric(gsub("\\D", "", basename(file)))
df <- read_xlsx(file, sheet = 1) |>
clean_names()
df_solar <- df |>
filter(technology == 'Solar Photovoltaic') |>
group_by(state) |>
reframe(total_mw = sum(nameplate_capacity_mw)) |>
mutate(year = year) |>
filter(state != 'DC')
solar_state_year <- bind_rows(solar_state_year, df_solar)
}
View(solar_state_year)
grid <- expand.grid(
state = state.abb,
year = 2014:2023
) |> as_tibble()
solar_panel_final <- grid |>
left_join(solar_state_year,
by = c('state', 'year'))
View(solar_panel_final)
library(readr)
library(readxl)
library(janitor)
library(dplyr)
library(tidyr)
library(ggplot2)
library(usdata)
library(tibble)
grid <- expand.grid(
state = state.abb,
year = 2014:2023
) |> as_tibble()
file_list <- list.files('project_data/raw/generator', full.names = TRUE)
solar_state_year <- data.frame()
for (file in file_list) {
year <- as.numeric(gsub("\\D", "", basename(file)))
df <- read_xlsx(file, sheet = 1) |>
clean_names()
df_solar <- df |>
filter(technology == 'Solar Photovoltaic') |>
group_by(state) |>
reframe(total_mw = sum(nameplate_capacity_mw)) |>
mutate(year = year) |>
filter(state != 'DC')
solar_state_year <- bind_rows(solar_state_year, df_solar)
}
for (file in file_list) {
year <- as.numeric(gsub("\\D", "", basename(file)))
df <- read_xlsx(file, sheet = 1) |>
clean_names()
df_solar <- df |>
filter(technology == 'Solar Photovoltaic') |>
group_by(state) |>
reframe(total_mw = sum(nameplate_capacity_mw)) |>
mutate(year = year) |>
filter(state != 'DC')
solar_clean <- bind_rows(solar_state_year, df_solar)
}
grid <- expand.grid(
state = state.abb,
year = 2014:2023
) |> as_tibble()
file_list <- list.files('project_data/raw/generator', full.names = TRUE)
solar_clean <- data.frame()
for (file in file_list) {
year <- as.numeric(gsub("\\D", "", basename(file)))
df <- read_xlsx(file, sheet = 1) |>
clean_names()
df_solar <- df |>
filter(technology == 'Solar Photovoltaic') |>
group_by(state) |>
reframe(total_mw = sum(nameplate_capacity_mw)) |>
mutate(year = year) |>
filter(state != 'DC')
solar_clean <- bind_rows(solar_clean, df_solar)
}
rps_raw <- read_xlsx('project_data/raw/rps_ces_nominal_aug_2024.xlsx',
sheet = 1,
skip = 24)
View(rps_raw)
# Filter data using regular expressions to find relevant policies
rps_small <- rps_raw |>
select(-`Special Notes`) |>
fill(State, .direction = 'down') |>
filter(grepl('total rps', `RPS Tier or Carve Out`, ignore.case = TRUE) |
grepl('solar', `RPS Tier or Carve Out`, ignore.case = TRUE) &
grepl('carve|requirement', `RPS Tier or Carve Out`, ignore.case = TRUE) &
!grepl('non', `RPS Tier or Carve Out`, ignore.case = TRUE))
# Pivot & slice
rps_long <- rps_small |>
pivot_longer(cols = matches("[0-9]{4}"),
names_to = "year",
values_to = "percent") |>
filter(year >= 2014, year <= 2023) |>
mutate(year = as.integer(year)) |>
clean_names() |>
rename(policy = rps_tier_or_carve_out)
View(rps_long)
# Create binaries and select relevant policies and pivot data to (state X year)
# Created binary variables to flag whether there were active policies in states
# in addition to any targets to help differentiate those states with RPS targets
# and without
policy_long <- rps_long |>
mutate(rps_target = ifelse(grepl('total rps', policy, ignore.case = TRUE) &
!is.na(percent), percent, NA_real_),
rps_active = ifelse(rps_target > 0 & !is.na(rps_target), 1, 0),
solar_active = ifelse(grepl('solar', policy, ignore.case = TRUE) &
percent > 0, 1, 0))
policy_clean <- policy_long |>
group_by(state, year) |>
summarise(rps_target = max(rps_target, na.rm = TRUE),
rps_active = max(rps_active),
solar_active = max(solar_active))
file_list_party <- list.files('project_data/raw/party_control', full.names = TRUE)
df_party <- data.frame()
for (file in file_list_party) {
year <- as.numeric(gsub("\\D", "", basename(file)))
df <- read_xlsx(file, skip = 1) |>
clean_names() |>
mutate(year = year) |>
select(state, year, state_control) |>
slice(1:50)
df_party <- bind_rows(df_party, df)
}
# Clean state names
## Removed "*" from state names as footnotes not directly relevant to this analysis
## "N/A" listed are all from Nebraska as they have 'unicameral' state congress. However,
## Nebraska's has been consistently "Rep" since 1999.
df_party$state <- gsub("\\*", "", df_party$state)
df_party$state_control <- df_party$state_control |>
gsub("\\*", "", x = _) |>
gsub("N/A", "Rep", x = _)
df_party_clean <- df_party |>
mutate(state = state2abbr(state))
df_elec <- read_csv("project_data/raw/Average_retail_price_of_electricity.csv", skip = 4,
show_col_types = FALSE) |>
drop_na()
# Remove prefix from state column
df_elec$description <- df_elec$description |>
gsub("^All sectors :\\s*", "", x = _) |>
sort(x = _)
# Filter and abbr.
df_elec <- df_elec |>
rename(state = description) |>
rename(avg_retail_price_kwh = value) |>
filter(state != "District Of Columbia") |>
select(-units, -"source key") |>
mutate(state = state2abbr(state))
df_elec <- read_csv("project_data/raw/Average_retail_price_of_electricity.csv", skip = 4,
show_col_types = FALSE) |>
drop_na()
# Remove prefix from state column
df_elec$description <- df_elec$description |>
gsub("^All sectors :\\s*", "", x = _) |>
sort(x = _)
# Filter and abbr.
df_elec <- df_elec |>
rename(state = description) |>
filter(state != "District Of Columbia") |>
select(-units, -"source key") |>
mutate(state = state2abbr(state))
# Pivot to state x year format
df_elec_clean <- df_elec |>
pivot_longer(cols = matches("[0-9]{4}"),
names_to = "year") |>
mutate(year = as.integer(year)) |>
filter(year <= 2023) |>
rename(avg_retail_price_kwh = value)
solar_panel_final <- grid |>
left_join(solar_clean, by = c('state', 'year')) |>
left_join(policy_clean, by = c('state', 'year')) |>
left_join(df_party_clean, by = c('state', 'year')) |>
left_join(df_elec_clean, by = c('state', 'year')
solar_panel_final <- grid |>
View(rps_long)
# Andrew Shaw
# 6011 R Coding & Analysis Final
# final code | compiled scripts
library(readr)
library(readxl)
library(janitor)
library(dplyr)
library(tidyr)
library(ggplot2)
library(usdata)
library(tibble)
# Create full (state X year) panel ----------------------------------------
## Used as base to left_join other data sets to ensure that all combinations
## are retained as some states had no reported solar capacity or missing policy data.
grid <- expand.grid(
state = state.abb,
year = 2014:2023
) |> as_tibble()
# Solar generator capacity ------------------------------------------------
file_list <- list.files('project_data/raw/generator', full.names = TRUE)
solar_clean <- data.frame()
for (file in file_list) {
year <- as.numeric(gsub("\\D", "", basename(file)))
df <- read_xlsx(file, sheet = 1) |>
clean_names()
df_solar <- df |>
filter(technology == 'Solar Photovoltaic') |>
group_by(state) |>
reframe(total_mw = sum(nameplate_capacity_mw)) |>
mutate(year = year) |>
filter(state != 'DC')
solar_clean <- bind_rows(solar_clean, df_solar)
}
# RPS data ----------------------------------------------------------------
rps_raw <- read_xlsx('project_data/raw/rps_ces_nominal_aug_2024.xlsx',
sheet = 1,
skip = 24)
# Filter data using regular expressions to find relevant policies
rps_small <- rps_raw |>
select(-`Special Notes`) |>
fill(State, .direction = 'down') |>
filter(grepl('total rps', `RPS Tier or Carve Out`, ignore.case = TRUE) |
grepl('solar', `RPS Tier or Carve Out`, ignore.case = TRUE) &
grepl('carve|requirement', `RPS Tier or Carve Out`, ignore.case = TRUE) &
!grepl('non', `RPS Tier or Carve Out`, ignore.case = TRUE))
# Pivot & slice
rps_long <- rps_small |>
pivot_longer(cols = matches("[0-9]{4}"),
names_to = "year",
values_to = "percent") |>
filter(year >= 2014, year <= 2023) |>
mutate(year = as.integer(year)) |>
clean_names() |>
rename(policy = rps_tier_or_carve_out)
# Create binaries and select relevant policies and pivot data to (state X year)
# Created binary variables to flag whether there were active policies in states
# in addition to any targets to help differentiate those states with RPS targets
# and without
policy_long <- rps_long |>
mutate(rps_target = ifelse(grepl('total rps', policy, ignore.case = TRUE) &
!is.na(percent), percent, NA_real_),
rps_active = ifelse(rps_target > 0 & !is.na(rps_target), 1, 0),
solar_active = ifelse(grepl('solar', policy, ignore.case = TRUE) &
percent > 0, 1, 0))
policy_clean <- policy_long |>
group_by(state, year) |>
summarise(rps_target = max(rps_target, na.rm = TRUE),
rps_active = max(rps_active),
solar_active = max(solar_active))
# Political party control -------------------------------------------------
file_list_party <- list.files('project_data/raw/party_control', full.names = TRUE)
df_party <- data.frame()
for (file in file_list_party) {
year <- as.numeric(gsub("\\D", "", basename(file)))
df <- read_xlsx(file, skip = 1) |>
clean_names() |>
mutate(year = year) |>
select(state, year, state_control) |>
slice(1:50)
df_party <- bind_rows(df_party, df)
}
# Clean state names
## Removed "*" from state names as footnotes not directly relevant to this analysis
## "N/A" listed are all from Nebraska as they have 'unicameral' state congress. However,
## Nebraska's has been consistently "Rep" since 1999.
df_party$state <- gsub("\\*", "", df_party$state)
df_party$state_control <- df_party$state_control |>
gsub("\\*", "", x = _) |>
gsub("N/A", "Rep", x = _)
df_party_clean <- df_party |>
mutate(state = state2abbr(state))
# Average retail electricity prices ---------------------------------------
df_elec <- read_csv("project_data/raw/Average_retail_price_of_electricity.csv", skip = 4,
show_col_types = FALSE) |>
drop_na()
# Remove prefix from state column
df_elec$description <- df_elec$description |>
gsub("^All sectors :\\s*", "", x = _) |>
sort(x = _)
# Filter and abbr.
df_elec <- df_elec |>
rename(state = description) |>
filter(state != "District Of Columbia") |>
select(-units, -"source key") |>
mutate(state = state2abbr(state))
# Pivot to state x year format
df_elec_clean <- df_elec |>
pivot_longer(cols = matches("[0-9]{4}"),
names_to = "year") |>
mutate(year = as.integer(year)) |>
filter(year <= 2023) |>
rename(avg_retail_price_kwh = value)
solar_panel_final <- grid |>
left_join(solar_clean, by = c('state', 'year')) |>
left_join(policy_clean, by = c('state', 'year')) |>
left_join(df_party_clean, by = c('state', 'year')) |>
left_join(df_elec_clean, by = c('state', 'year'))
View(solar_panel_final)
is.na(solar_panel_final)
sum(is.na(solar_panel_final))
500*8
636/4000
model <- lm(total_mw ~ rps_target, rps_active, solar_active, state_control,
avg_retail_price_kwh, data = solar_panel_final)
model <- lm(total_mw ~ rps_target, rps_active, solar_active, state_control,
avg_retail_price_kwh, data = solar_panel_final)
colnames(solar_panel_final)
model <- lm(total_mw ~ rps_target, rps_active, solar_active)
model <- lm(total_mw ~ rps_target + rps_active + solar_active + state_control +
avg_retail_price_kwh, data = solar_panel_final)
model
View(solar_panel_final)
non_rps_states <- c("AL", "AK", "AR", "FL", "GA", "ID", "KY", "MS", "NE",
"TN", "WV", "WY")
rm(solar_panel_final)
solar_panel_merge <- grid |>
left_join(solar_clean, by = c('state', 'year')) |>
left_join(policy_clean, by = c('state', 'year')) |>
left_join(df_party_clean, by = c('state', 'year')) |>
left_join(df_elec_clean, by = c('state', 'year'))
non_rps_states <- c("AL", "AK", "AR", "FL", "GA", "ID", "KY", "MS", "NE",
"TN", "WV", "WY")
solar_panel_final <- solar_panel_merge |>
mutate(
rps_target = ifelse(state %in% non_rps_states & NA, 0, rps_target),
rps_active = ifelse(state %in% non_rps_states & NA, 0, rps_active)
)
View(solar_panel_final)
solar_panel_final <- solar_panel_merge |>
mutate(
rps_target = ifelse(state %in% non_rps_states & NA, 0, rps_target),
rps_active = ifelse(state %in% non_rps_states & NA, 0, rps_active)
)
solar_panel_final <- solar_panel_merge |>
mutate(
rps_target = ifelse(state %in% non_rps_states & is.na(rps_target), 0, rps_target),
rps_active = ifelse(state %in% non_rps_states & is.na(rps_active), 0, rps_active)
)
View(solar_panel_final)
non_rps_states <- c("AL", "AK", "AR", "FL", "GA", "ID", "IN", "KY", "MS", "NE",
"TN", "WV", "WY")
solar_panel_final <- solar_panel_merge |>
mutate(
rps_target = ifelse(state %in% non_rps_states & is.na(rps_target), 0, rps_target),
rps_active = ifelse(state %in% non_rps_states & is.na(rps_active), 0, rps_active)
)
View(solar_panel_final)
non_rps_states <- c("AL", "AK", "AR", "FL", "GA", "ID", "IN", "KY", "LA", "MS",
"NE","ND", "TN", "WV", "WY")
solar_panel_final <- solar_panel_merge |>
mutate(
rps_target = ifelse(state %in% non_rps_states & is.na(rps_target), 0, rps_target),
rps_active = ifelse(state %in% non_rps_states & is.na(rps_active), 0, rps_active)
)
View(solar_panel_final)
non_rps_states <- c("AL", "AK", "AR", "FL", "GA", "ID", "IN", "KY", "LA", "MS",
"NE","ND", "SC", "SD", "TN", "UT", "WV", "WY")
solar_panel_final <- solar_panel_merge |>
mutate(
rps_target = ifelse(state %in% non_rps_states & is.na(rps_target), 0, rps_target),
rps_active = ifelse(state %in% non_rps_states & is.na(rps_active), 0, rps_active)
)
View(solar_panel_final)
non_rps_states <- c("AL", "AK", "AR", "FL", "GA", "ID", "IN", "KY", "LA", "MS",
"NE","ND", "OK", "SC", "SD", "TN", "UT", "WV", "WY")
solar_panel_final <- solar_panel_merge |>
mutate(
rps_target = ifelse(state %in% non_rps_states & is.na(rps_target), 0, rps_target),
rps_active = ifelse(state %in% non_rps_states & is.na(rps_active), 0, rps_active)
)
View(solar_panel_final)
rm(non_rps_states)
solar_panel_final <- solar_panel_merge |>
rps_active = replace_na(rps_active, 0) |>
rps_target = replace_na(rps_target, 0) |>
solar_active = replace_na(solar_active, 0)
solar_panel_final <- solar_panel_merge |>
mutate(
rps_active = replace_na(rps_active, 0) |>
rps_target = replace_na(rps_target, 0) |>
solar_panel_final <- solar_panel_merge |>
mutate(
rps_active = replace_na(rps_active, 0),
rps_target = replace_na(rps_target, 0),
solar_active = replace_na(solar_active,0))
View(solar_panel_final)
solar_panel_final <- solar_panel_merge |>
mutate(
rps_active = replace_na(rps_active, 0),
rps_target = replace_na(rps_target, 0),
solar_active = replace_na(solar_active,0),
total_mw = replace_na(total_mw, 0))
View(solar_panel_final)
model <- lm(total_mw ~ rps_target + rps_active + solar_active + state_control +
avg_retail_price_kwh, data = solar_panel_final)
model
str(solar_panel_final)
solar_panel_final$state_control <- as.factor(solar_panel_final$state_control)
model <- lm(total_mw ~ rps_target + rps_active + solar_active + state_control +
avg_retail_price_kwh, data = solar_panel_final)
model
str(solar_panel_final)
solar_panel_final$state_control <- as.factor(solar_panel_final$state_control, ref="Rep")
solar_panel_final$state_control <- as.factor(solar_panel_final$state_control, ref="R")
solar_panel_final$state_control <- as.factor(solar_panel_final$state_control)
model
summary(model)
model <- lm(total_mw ~ rps_target + rps_active + avg_retail_price_kwh, data = solar_panel_final)
summary(model)
model <- lm(total_mw ~ rps_target + avg_retail_price_kwh, data = solar_panel_final)
summary(model)
>>>>>>> 5943f879ddeebd264f4f7880cee86d64e2fee59d
